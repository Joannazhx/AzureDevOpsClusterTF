
parameters:
  - name: terraformDir
    displayName: Terraform Template Dir Path
    type: string

  - name: terraformCommandArgument
    displayName: Terraform Command Arguments
    type: string
    default: ''

  - name: localApply
    type: boolean
    default: false

  - name: serviceConnection
    default: "Azure Service Manage"

jobs:
  - job: TerraformValidateJob
    displayName: Check and Apply Terraform
    variables: 
      workingDirectory: ${{ parameters.terraformDir }}
    steps:
      # - checkout: self
      - checkout: none

      - task: AzureCLI@2
        displayName: Azure CLI
        inputs:
          azureSubscription: Azure Service Manage
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            az devops configure --defaults organization=https://dev.azure.com/joannaunswit/ project="joannaunswit"
            echo $(System.AccessToken) | az devops login
            # az devops login
        env:
          AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)

      - bash: |
          az pipelines build list
          git pr list
        env:
          AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
        displayName: 'Show build list and PRs'
      
      - task: TerraformInstaller@0
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'

      - template: ../step/terraformTask.yaml
        parameters:
          terraformDir: $(workingDirectory)
          terraformCommand: 'init'
          serviceConnection: ${{ parameters.serviceConnection }}

      - template: ../step/terraformTask.yaml
        parameters:
          terraformDir: $(workingDirectory)
          terraformCommand: 'validate'
          commandArguments: ${{ parameters.terraformCommandArgument }}
          serviceConnection: ${{ parameters.serviceConnection }}

      - template: ../step/terraformTask.yaml
        parameters:
          terraformDir: $(workingDirectory)
          terraformCommand: 'plan'
          commandArguments: '${{ parameters.terraformCommandArgument }} -out=$(Build.ArtifactStagingDirectory)/terraform.tfplan -detailed-exitcode'
          serviceConnection: ${{ parameters.serviceConnection }}

      - bash: |
          env | sort
        displayName: 'output env var'

      - ${{ if eq(parameters.localApply, true) }}:
          - bash: |
              echo "TERRAFORM_PLAN_HAS_CHANGES: $TERRAFORM_PLAN_HAS_CHANGES"
              echo "##vso[task.logissue type=error] Prepare Azure resources have changed. Please apply locally and update tfstate file"
              exit 1
            displayName: Check Prepare resources Changes
            failOnStderr: true
            condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
      