resources:
  repositories:
    - repository: AzureDevops # The name used to reference this repository in the checkout step
      type: github
      endpoint: Joannazhx
      name: Joannazhx/AzureDevOpsClusterTF
    - repository: WebApp # The name used to reference this repository in the checkout step
      type: github
      endpoint: Joannazhx
      name: Joannazhx/TechChallengeApp

# trigger:
#   branches:
#     include:
#       - master

pool:
  vmImage: 'ubuntu-latest'

stages: 
#   - stage: PrepareTerraformCheck
#     displayName: Check Prepare Terraform
#     jobs:
#       - template: job/terraformApply.yaml
#         parameters:
#           terraformDir: $(System.DefaultWorkingDirectory)/k8s-app/terraform/pre
#           localApply: true

#   - stage: ClusterTerraformApply
#     displayName: Apply Cluster Terraform
#     dependsOn: PrepareTerraformCheck
#     jobs:
#       - template: job/terraformApply.yaml
#         parameters:
#           terraformDir: $(System.DefaultWorkingDirectory)/k8s-app/terraform/cluster
#           remoteBackend: 
#             backendType: azurerm
#             backendAzureRmResourceGroupName: 'edapp-aks-terraform-storage-rg-dev'
#             backendAzureRmResourceGroupLocation: 'centralus'
#             backendAzureRmStorageAccountName: 'ftstateaccount'
#             backendAzureRmStorageAccountSku: 'Standard_LRS'
#             backendAzureRmContainerName: 'tfstate'
#             backendAzureRmKey: edapp.dev.terraform.tfstate

#   - stage: BuildAndPublishDockerImage
#     displayName: Build And Publish Docker Image
#     dependsOn: ClusterTerraformApply
#     jobs:
#       - job: BuildTAndPublishService
#         displayName: 'Build And Publish Service'
#         steps:
#           - checkout: WebApp
#             clean: false
#             path: WebApp

#           - task: Docker@2
#             displayName: Login to ACR
#             inputs:
#               command: login
#               containerRegistry: Azure Container Register

#           - task: Docker@2
#             displayName: 'Build WebApp Image'
#             inputs:
#               command: build
#               repository: servian
#               dockerfile: $(Agent.BuildDirectory)/WebApp/Dockerfile
#               buildContext: $(Agent.BuildDirectory)/WebApp
#               tags: |
#                 latest

#           - task: Docker@2
#             displayName: 'Push WebApp Image'
#             inputs:
#               command: push
#               repository: servian
#               tags: |
#                 latest

  - stage: DeployToKubenetesCluster
    displayName: 'Deploy To Kubenetes Cluster'
    # dependsOn:
    #   - BuildAndPublishDockerImage

    jobs:
      - job: DeployImageToAks
        displayName: Deploy Built Images to AKS and Clean up

        steps:

          - task: KubectlInstaller@0
            displayName: Kubectl Installer


          - task: Docker@2
            displayName: Login to ACR
            inputs:
              command: login
              containerRegistry: Azure Container Register

          - task: Kubernetes@1
            displayName: Setting up Kubeconfig
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: Azure Kubernetes Cluster
              command: login

          - task: Kubernetes@1
            displayName: kubectl deploy
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: Azure Service Manage
              azureResourceGroup: servain-aks-rg-dev
              kubernetesCluster: servain-aks-dev
              command: apply
              arguments: -f $(Build.SourcesDirectory)/k8s-app/k8s/postgresdb/configmap.yaml

          - task: Kubernetes@1
            displayName: kubectl apply deploy
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: Azure Service Manage
              azureResourceGroup: servain-aks-rg-dev
              kubernetesCluster: servain-aks-dev
              command: apply
              arguments: -f $(Build.SourcesDirectory)/k8s-app/k8s/postgresdb/persistvoloumn.yaml

          - task: Kubernetes@1
            displayName: kubectl apply deploy
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: Azure Service Manage
              azureResourceGroup: servain-aks-rg-dev
              kubernetesCluster: servain-aks-dev
              command: apply
              arguments: -f $(Build.SourcesDirectory)/k8s-app/k8s/postgresdb/deployment.yaml

          - task: Kubernetes@1
            displayName: kubectl apply deploy
            inputs:
              connectionType: Azure Resource Manager
              azureSubscriptionEndpoint: Azure Service Manage
              azureResourceGroup: servain-aks-rg-dev
              kubernetesCluster: servain-aks-dev
              command: apply
              arguments: -f $(Build.SourcesDirectory)/k8s-app/k8s/postgresdb/service.yaml

          - task: Kubernetes@1
            displayName: Cleaning up Kubeconfig
            condition: always()
            inputs:
              connectionType: Kubernetes Service Connection
              kubernetesServiceEndpoint: '${{ variables.AKSServiceConnection }}'
              command: logout

