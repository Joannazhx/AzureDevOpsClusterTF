resources:
  repositories:
    - repository: WebApp # The Webapp repo for build docker image
      type: github
      endpoint: Joannazhx
      name: Joannazhx/TechChallengeApp

# trigger:
#   branches:
#     include:
#       - master

pool:
  vmImage: 'ubuntu-latest'

stages: 
#   - stage: PrepareTerraformCheck
#     displayName: Check Prepare Terraform
#     jobs:
#       - template: job/terraformApply.yaml
#         parameters:
#           terraformDir: $(System.DefaultWorkingDirectory)/k8s-app/terraform/pre
#           localApply: true

#   - stage: ClusterTerraformApply
#     displayName: Apply Cluster Terraform
#     dependsOn: PrepareTerraformCheck
#     jobs:
#       - template: job/terraformApply.yaml
#         parameters:
#           terraformDir: $(System.DefaultWorkingDirectory)/k8s-app/terraform/cluster
#           remoteBackend: 
#             backendType: azurerm
#             backendAzureRmResourceGroupName: 'edapp-aks-terraform-storage-rg-dev'
#             backendAzureRmResourceGroupLocation: 'centralus'
#             backendAzureRmStorageAccountName: 'ftstateaccount'
#             backendAzureRmStorageAccountSku: 'Standard_LRS'
#             backendAzureRmContainerName: 'tfstate'
#             backendAzureRmKey: edapp.dev.terraform.tfstate

  - stage: BuildAndPublishDockerImage
    displayName: Build And Publish Docker Image
    # dependsOn: ClusterTerraformApply
    jobs:
      - job: BuildTAndPublishService
        displayName: 'Build And Publish Service'
        steps:
          - checkout: WebApp
            clean: false
            path: WebApp

          - task: Docker@2
            displayName: Login to ACR
            inputs:
              command: login
              containerRegistry: Azure Container Register

          - task: Docker@2
            displayName: 'Build WebApp Image'
            inputs:
              command: build
              repository: techchallengeapp
              dockerfile: $(Agent.BuildDirectory)/WebApp/Dockerfile
              buildContext: $(Agent.BuildDirectory)/WebApp
              tags: |
                latest

          - task: Docker@2
            displayName: 'Push WebApp Image'
            inputs:
              command: push
              repository: techchallengeapp
              tags: |
                latest

  - stage: DeployToKubenetesCluster
    displayName: 'Deploy To Kubenetes Cluster'
    dependsOn:
      - BuildAndPublishDockerImage

    jobs:
      - template: job/kuberneteApply.yaml
        parameters:
          Service: Postgres DB
          k8sDir: $(Build.SourcesDirectory)/k8s-app/k8s/postgresdb
          cluster: servain-aks-dev
          clusterResourceGroup: servain-aks-rg-dev
          kubernetesScriptsFileNames:
            - configmap.yaml
            - persistvoloumn.yaml
            - deployment.yaml
            - service.yaml
      
      - template: job/kuberneteApply.yaml
        parameters:
          Service: App
          k8sDir: $(Build.SourcesDirectory)/k8s-app/k8s/app
          cluster: servain-aks-dev
          clusterResourceGroup: servain-aks-rg-dev
          kubernetesScriptsFileNames:
            - configmap.yaml
            - deployment.yaml
            - service.yaml
            

      # - job: DeployPostgresToAks
      #   displayName: Deploy Built Images to AKS and Clean up

      #   steps:

          # - task: KubectlInstaller@0
          #   displayName: Kubectl Installer

          # - task: Docker@2
          #   displayName: Login to ACR
          #   inputs:
          #     command: login
          #     containerRegistry: Azure Container Register

          # - task: Kubernetes@1
          #   displayName: Setting up Kubeconfig
          #   inputs:
          #     connectionType: Kubernetes Service Connection
          #     kubernetesServiceEndpoint: Azure Kubernetes Cluster
          #     command: login

          # - task: Kubernetes@1
          #   displayName: kubectl deploy
          #   inputs:
          #     connectionType: Azure Resource Manager
          #     azureSubscriptionEndpoint: Azure Service Manage
          #     azureResourceGroup: servain-aks-rg-dev
          #     kubernetesCluster: servain-aks-dev
          #     command: apply
          #     arguments: -f $(Build.SourcesDirectory)/k8s-app/k8s/postgresdb/configmap.yaml

          # - task: Kubernetes@1
          #   displayName: kubectl apply deploy
          #   inputs:
          #     connectionType: Azure Resource Manager
          #     azureSubscriptionEndpoint: Azure Service Manage
          #     azureResourceGroup: servain-aks-rg-dev
          #     kubernetesCluster: servain-aks-dev
          #     command: apply
          #     arguments: -f $(Build.SourcesDirectory)/k8s-app/k8s/postgresdb/persistvoloumn.yaml

          # - task: Kubernetes@1
          #   displayName: kubectl apply deploy
          #   inputs:
          #     connectionType: Azure Resource Manager
          #     azureSubscriptionEndpoint: Azure Service Manage
          #     azureResourceGroup: servain-aks-rg-dev
          #     kubernetesCluster: servain-aks-dev
          #     command: apply
          #     arguments: -f $(Build.SourcesDirectory)/k8s-app/k8s/postgresdb/deployment.yaml

          # - task: Kubernetes@1
          #   displayName: kubectl apply deploy
          #   inputs:
          #     connectionType: Azure Resource Manager
          #     azureSubscriptionEndpoint: Azure Service Manage
          #     azureResourceGroup: servain-aks-rg-dev
          #     kubernetesCluster: servain-aks-dev
          #     command: apply
          #     arguments: -f $(Build.SourcesDirectory)/k8s-app/k8s/postgresdb/service.yaml

          # - task: Kubernetes@1
          #   displayName: Cleaning up Kubeconfig
          #   condition: always()
          #   inputs:
          #     connectionType: Kubernetes Service Connection
          #     kubernetesServiceEndpoint: '${{ variables.AKSServiceConnection }}'
          #     command: logout

      # - job: DeployWebAppToAks
      #   displayName: Deploy Built Images to AKS and Clean up

      #   steps:

      #     - task: KubectlInstaller@0
      #       displayName: Kubectl Installer

      #     - task: Docker@2
      #       displayName: Login to ACR
      #       inputs:
      #         command: login
      #         containerRegistry: Azure Container Register

      #     - task: Kubernetes@1
      #       displayName: Setting up Kubeconfig
      #       inputs:
      #         connectionType: Kubernetes Service Connection
      #         kubernetesServiceEndpoint: Azure Kubernetes Cluster
      #         command: login

      #     - task: Kubernetes@1
      #       displayName: kubectl deploy
      #       inputs:
      #         connectionType: Azure Resource Manager
      #         azureSubscriptionEndpoint: Azure Service Manage
      #         azureResourceGroup: servain-aks-rg-dev
      #         kubernetesCluster: servain-aks-dev
      #         command: apply
      #         arguments: -f $(Build.SourcesDirectory)/k8s-app/k8s/app/configmap.yaml

      #     - task: Kubernetes@1
      #       displayName: kubectl apply deploy
      #       inputs:
      #         connectionType: Azure Resource Manager
      #         azureSubscriptionEndpoint: Azure Service Manage
      #         azureResourceGroup: servain-aks-rg-dev
      #         kubernetesCluster: servain-aks-dev
      #         command: apply
      #         arguments: -f $(Build.SourcesDirectory)/k8s-app/k8s/app/deployment.yaml

      #     - task: Kubernetes@1
      #       displayName: kubectl apply deploy
      #       inputs:
      #         connectionType: Azure Resource Manager
      #         azureSubscriptionEndpoint: Azure Service Manage
      #         azureResourceGroup: servain-aks-rg-dev
      #         kubernetesCluster: servain-aks-dev
      #         command: apply
      #         arguments: -f $(Build.SourcesDirectory)/k8s-app/k8s/app/service.yaml

      #     - task: Kubernetes@1
      #       displayName: Cleaning up Kubeconfig
      #       condition: always()
      #       inputs:
      #         connectionType: Kubernetes Service Connection
      #         kubernetesServiceEndpoint: '${{ variables.AKSServiceConnection }}'
      #         command: logout

      

